#! /bin/bash



NBARGS=3


pname="$0-$1"





function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : Log image stream $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Start process to log image stream to disk"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h c <CPUset>] <stream> <blocksize> <directory>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)              help"
echo "     $(tput bold)-c$(tput sgr0) <CPUset>     move process to CPUset"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <stream>            Shared memory stream name. Actual file is /tmp/<stream name>.im.shm"
echo "     <blocksize>         Number of slices in each data cube saved"
echo "     <directory>         Destination directory"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "     $0 ircam2 10000 /media/data/20150222/ircamlog/"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       Start process to log image stream to disk\n" "$0" 
}





EXITSTATUS=0



function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}


function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}






# ================= OPTIONS =============================


# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done




CPUset="NULL"

while getopts :hc: FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    c) # CPU set
    CPUset="$OPTARG"
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))








if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



# ======================= CHECK REQUIRED FILES =================================
echo ""
checkFile /tmp/$1.im.shm


# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand milk




if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi


mkdir -p $3


milk -n $pname << EOF
csetpmove ${CPUset}
shmimstreamlog $1 $2 "$3"
exit
EOF
